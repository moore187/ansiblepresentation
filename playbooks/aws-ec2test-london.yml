---

- hosts: localhost
  connection: local
  gather_facts: False
  become: yes

  tasks:
    
    - name: Include variable folder
      include_vars:
        dir: config

    - pip:
        name: 
          - boto
          - boto3
          - botocore

    - name: Provision the base image 
      ec2:
         key_name: ecsWorkKeyPair
         aws_access_key: "{{ec2_access_key}}"
         aws_secret_key: "{{ec2_secret_key}}"
         group: ansible-test
         region: eu-west-2
         instance_type: t2.micro
         image: ami-e1768386
         wait: true
         exact_count: 1
         count_tag:
            Name: Demo
         instance_tags:
            Name: Demo
      register: ec2

    - name: Add all instance public IPs to host group
      add_host: hostname={{ item.public_ip }} groups=ec2hosts
      loop: "{{ ec2.instances }}"

    - pause: seconds=20

- hosts: ec2hosts
  name: configure instances
  connection: ssh
  remote_user: ec2-user
  gather_facts: true
  become: yes
  vars:
    ansible_ssh_private_key_file: ~/.ssh/ecsWorkKeyPair.pem
 
  tasks:
    
    - name: Install HTTPD
      yum:
        name: httpd
        state: latest
    
    - name: Create a simple Coming Soon index.html page
      shell: echo "Ritchies website coming soon...." > /var/www/html/index.html
    
    - name: Start HTTPD
      service: name=httpd state=started enabled=yes

    - pause: seconds=15

- hosts: localhost
  connection: local
  gather_facts: True
  become: yes

  tasks:
   
    - name: Include variable folder
      include_vars:
        dir: config

    - name: Convert the new machine into an AMI for future use
      ec2_ami:
         aws_access_key: "{{ec2_access_key}}"
         aws_secret_key: "{{ec2_secret_key}}"
         region: eu-west-2
         instance_id: "{{ ec2.instances[0].id }}"
         name: "testAMI-{{ ansible_date_time.date }}"
         wait: yes
         tags:
           Name: testAMIRMCS
           Service: testAMIRMCS
      register: amitemplate
     
    - debug:
         msg: "{{ amitemplate.image_id }}"

    - name: Delete the imaged VM as it is no longer required
      ec2:
         aws_access_key: "{{ec2_access_key}}"
         aws_secret_key: "{{ec2_secret_key}}"
         region: eu-west-2
         instance_id: "{{ ec2.instances[0].id }}"
         state: absent 
 
    - name: Create a launch configuration based on the AMI we just created
      ec2_lc:
         name: LondonLaunchConfig
         aws_access_key: "{{ec2_access_key}}"
         aws_secret_key: "{{ec2_secret_key}}"
         region: eu-west-2
         image_id: "{{ amitemplate.image_id }}"
         key_name: ecsWorkKeyPair
         security_groups: ['ansible-test']
         instance_type: t2.micro

    - name: create a target group 
      elb_target_group:
         name: WebServers
         aws_access_key: "{{ec2_access_key}}"
         aws_secret_key: "{{ec2_secret_key}}"
         protocol: http
         port: 80
         region: eu-west-2
         vpc_id: vpc-d9cf6cb1
         health_check_path: /index.html
         successful_response_codes: "200"
         state: present
      register: elbtargetgroup

    - name: Add an application loadbalancer to serve HTTP requests. 
      elb_application_lb:
         name: rmcomingsoonlb
         aws_access_key: "{{ec2_access_key}}"
         aws_secret_key: "{{ec2_secret_key}}"
         region: eu-west-2
         security_groups:
            - ansible-test
         subnets:
            - subnet-04e6237e
            - subnet-66272c2b
            - subnet-c551d4ac
         listeners:
            - Protocol: HTTP
              Port: 80
              DefaultActions:
                - Type: forward 
                  TargetGroupName: "{{ elbtargetgroup.target_group_name }}"
         state: present
      register: elb_application_lb
    
    - debug: 
         msg: "The application loadbalancer URL is {{elb_application_lb.dns_name}}" 

    - name: Create an AutoScaling group of minimum 2 nodes to serve HTTP requests
      ec2_asg:
         name: RitchieComingSoonASG
         aws_access_key: "{{ec2_access_key}}"
         aws_secret_key: "{{ec2_secret_key}}"
         launch_config_name: LondonLaunchConfig
         state: present
         min_size: 2
         max_size: 2
         replace_all_instances: yes
         desired_capacity: 2
         region: eu-west-2
         health_check_type: EC2
         target_group_arns: "{{ elbtargetgroup.target_group_arn }}"
